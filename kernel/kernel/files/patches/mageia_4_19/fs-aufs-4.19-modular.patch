
 fs/aufs/Kconfig          |    2 +-
 fs/dcache.c              |    2 ++
 fs/exec.c                |    1 +
 fs/fcntl.c               |    1 +
 fs/file_table.c          |    3 +++
 fs/inode.c               |    1 +
 fs/namespace.c           |    2 ++
 fs/notify/group.c        |    4 ++++
 fs/notify/mark.c         |    3 +++
 fs/open.c                |    1 +
 fs/read_write.c          |    4 ++++
 fs/splice.c              |    2 ++
 fs/sync.c                |    1 +
 fs/xattr.c               |    1 +
 kernel/task_work.c       |    1 +
 security/commoncap.c     |    2 ++
 security/device_cgroup.c |    2 ++
 security/security.c      |   10 ++++++++++
 18 files changed, 42 insertions(+), 1 deletion(-)

diff -Nurp linux-4.19.1-aufs/fs/aufs/Kconfig linux-4.19.1-aufs-mod/fs/aufs/Kconfig
--- linux-4.19.1-aufs/fs/aufs/Kconfig	2018-11-05 20:06:43.402301839 +0200
+++ linux-4.19.1-aufs-mod/fs/aufs/Kconfig	2018-11-05 20:08:19.014106701 +0200
@@ -1,6 +1,6 @@
 # SPDX-License-Identifier: GPL-2.0
 config AUFS_FS
-	bool "Aufs (Advanced multi layered unification filesystem) support"
+	tristate "Aufs (Advanced multi layered unification filesystem) support"
 	help
 	Aufs is a stackable unification filesystem such as Unionfs,
 	which unifies several directories and provides a merged single
diff -Nurp linux-4.19.1-aufs/fs/dcache.c linux-4.19.1-aufs-mod/fs/dcache.c
--- linux-4.19.1-aufs/fs/dcache.c	2018-11-05 20:06:43.409301971 +0200
+++ linux-4.19.1-aufs-mod/fs/dcache.c	2018-11-05 20:08:19.014106701 +0200
@@ -1343,6 +1343,7 @@ rename_retry:
 	seq = 1;
 	goto again;
 }
+EXPORT_SYMBOL_GPL(d_walk);
 
 struct check_mount {
 	struct vfsmount *mnt;
@@ -2837,6 +2838,7 @@ void d_exchange(struct dentry *dentry1,
 
 	write_sequnlock(&rename_lock);
 }
+EXPORT_SYMBOL_GPL(d_exchange);
 
 /**
  * d_ancestor - search for an ancestor
diff -Nurp linux-4.19.1-aufs/fs/exec.c linux-4.19.1-aufs-mod/fs/exec.c
--- linux-4.19.1-aufs/fs/exec.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/fs/exec.c	2018-11-05 20:08:19.014106701 +0200
@@ -109,6 +109,7 @@ bool path_noexec(const struct path *path
 	return (path->mnt->mnt_flags & MNT_NOEXEC) ||
 	       (path->mnt->mnt_sb->s_iflags & SB_I_NOEXEC);
 }
+EXPORT_SYMBOL_GPL(path_noexec);
 
 #ifdef CONFIG_USELIB
 /*
diff -Nurp linux-4.19.1-aufs/fs/fcntl.c linux-4.19.1-aufs-mod/fs/fcntl.c
--- linux-4.19.1-aufs/fs/fcntl.c	2018-11-05 20:06:43.409301971 +0200
+++ linux-4.19.1-aufs-mod/fs/fcntl.c	2018-11-05 20:08:19.015106720 +0200
@@ -85,6 +85,7 @@ int setfl(int fd, struct file * filp, un
  out:
 	return error;
 }
+EXPORT_SYMBOL_GPL(setfl);
 
 static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,
                      int force)
diff -Nurp linux-4.19.1-aufs/fs/file_table.c linux-4.19.1-aufs-mod/fs/file_table.c
--- linux-4.19.1-aufs/fs/file_table.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/fs/file_table.c	2018-11-05 21:04:47.298905524 +0200
@@ -161,6 +161,7 @@ over:
 	}
 	return ERR_PTR(-ENFILE);
 }
+EXPORT_SYMBOL_GPL(alloc_empty_file);
 
 /*
  * Variant of alloc_empty_file() that doesn't check and modify nr_files.
@@ -323,6 +324,7 @@ void flush_delayed_fput(void)
 {
 	delayed_fput(NULL);
 }
+EXPORT_SYMBOL_GPL(flush_delayed_fput);
 
 static DECLARE_DELAYED_WORK(delayed_fput_work, delayed_fput);
 
@@ -365,6 +367,7 @@ void __fput_sync(struct file *file)
 }
 
 EXPORT_SYMBOL(fput);
+EXPORT_SYMBOL_GPL(__fput_sync);
 
 void __init files_init(void)
 {
diff -Nurp linux-4.19.1-aufs/fs/inode.c linux-4.19.1-aufs-mod/fs/inode.c
--- linux-4.19.1-aufs/fs/inode.c	2018-11-05 20:06:43.409301971 +0200
+++ linux-4.19.1-aufs-mod/fs/inode.c	2018-11-05 20:08:19.015106720 +0200
@@ -1666,6 +1666,7 @@ int update_time(struct inode *inode, str
 
 	return update_time(inode, time, flags);
 }
+EXPORT_SYMBOL_GPL(update_time);
 
 /**
  *	touch_atime	-	update the access time
diff -Nurp linux-4.19.1-aufs/fs/namespace.c linux-4.19.1-aufs-mod/fs/namespace.c
--- linux-4.19.1-aufs/fs/namespace.c	2018-11-05 20:06:43.410301989 +0200
+++ linux-4.19.1-aufs-mod/fs/namespace.c	2018-11-05 20:08:19.015106720 +0200
@@ -437,6 +437,7 @@ void __mnt_drop_write(struct vfsmount *m
 	mnt_dec_writers(real_mount(mnt));
 	preempt_enable();
 }
+EXPORT_SYMBOL_GPL(__mnt_drop_write);
 
 /**
  * mnt_drop_write - give up write access to a mount
@@ -1832,6 +1833,7 @@ int iterate_mounts(int (*f)(struct vfsmo
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(iterate_mounts);
 
 static void cleanup_group_ids(struct mount *mnt, struct mount *end)
 {
diff -Nurp linux-4.19.1-aufs/fs/notify/group.c linux-4.19.1-aufs-mod/fs/notify/group.c
--- linux-4.19.1-aufs/fs/notify/group.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/fs/notify/group.c	2018-11-05 20:09:24.538349333 +0200
@@ -23,6 +23,7 @@
 #include <linux/rculist.h>
 #include <linux/wait.h>
 #include <linux/memcontrol.h>
+#include <linux/module.h>
 
 #include <linux/fsnotify_backend.h>
 #include "fsnotify.h"
@@ -112,6 +113,7 @@ void fsnotify_get_group(struct fsnotify_
 {
 	refcount_inc(&group->refcnt);
 }
+EXPORT_SYMBOL_GPL(fsnotify_get_group);
 
 /*
  * Drop a reference to a group.  Free it if it's through.
@@ -121,6 +123,7 @@ void fsnotify_put_group(struct fsnotify_
 	if (refcount_dec_and_test(&group->refcnt))
 		fsnotify_final_destroy_group(group);
 }
+EXPORT_SYMBOL_GPL(fsnotify_put_group);
 
 /*
  * Create a new fsnotify_group and hold a reference for the group returned.
@@ -150,6 +153,7 @@ struct fsnotify_group *fsnotify_alloc_gr
 
 	return group;
 }
+EXPORT_SYMBOL_GPL(fsnotify_alloc_group);
 
 int fsnotify_fasync(int fd, struct file *file, int on)
 {
diff -Nurp linux-4.19.1-aufs/fs/notify/mark.c linux-4.19.1-aufs-mod/fs/notify/mark.c
--- linux-4.19.1-aufs/fs/notify/mark.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/fs/notify/mark.c	2018-11-05 20:53:39.635340341 +0200
@@ -125,6 +125,7 @@ __u32 fsnotify_conn_mask(struct fsnotify
 
 	return *fsnotify_conn_mask_p(conn);
 }
+EXPORT_SYMBOL_GPL(fsnotify_put_mark);
 
 static void __fsnotify_recalc_mask(struct fsnotify_mark_connector *conn)
 {
@@ -289,6 +290,7 @@ static bool fsnotify_get_mark_safe(struc
 	}
 	return false;
 }
+EXPORT_SYMBOL_GPL(fsnotify_destroy_mark);
 
 /*
  * Puts marks and wakes up group destruction if necessary.
@@ -572,6 +574,7 @@ out_err:
 	spin_unlock(&mark->lock);
 	return err;
 }
+EXPORT_SYMBOL_GPL(fsnotify_init_mark);
 
 /*
  * Attach an initialized mark to a given group and fs object.
diff -Nurp linux-4.19.1-aufs/fs/open.c linux-4.19.1-aufs-mod/fs/open.c
--- linux-4.19.1-aufs/fs/open.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/fs/open.c	2018-11-05 20:55:37.785556160 +0200
@@ -64,6 +64,7 @@ int do_truncate(struct dentry *dentry, l
 	inode_unlock(dentry->d_inode);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_truncate);
 
 long vfs_truncate(const struct path *path, loff_t length)
 {
diff -Nurp linux-4.19.1-aufs/fs/read_write.c linux-4.19.1-aufs-mod/fs/read_write.c
--- linux-4.19.1-aufs/fs/read_write.c	2018-11-05 20:06:43.410301989 +0200
+++ linux-4.19.1-aufs-mod/fs/read_write.c	2018-11-05 20:08:19.016106739 +0200
@@ -459,6 +459,7 @@ ssize_t vfs_read(struct file *file, char
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_read);
 
 static ssize_t new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
 {
@@ -499,6 +500,7 @@ vfs_readf_t vfs_readf(struct file *file)
 		return new_sync_read;
 	return ERR_PTR(-ENOSYS);
 }
+EXPORT_SYMBOL_GPL(vfs_readf);
 
 vfs_writef_t vfs_writef(struct file *file)
 {
@@ -510,6 +512,7 @@ vfs_writef_t vfs_writef(struct file *fil
 		return new_sync_write;
 	return ERR_PTR(-ENOSYS);
 }
+EXPORT_SYMBOL_GPL(vfs_writef);
 
 ssize_t __kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
 {
@@ -579,6 +582,7 @@ ssize_t vfs_write(struct file *file, con
 
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_write);
 
 static inline loff_t file_pos_read(struct file *file)
 {
diff -Nurp linux-4.19.1-aufs/fs/splice.c linux-4.19.1-aufs-mod/fs/splice.c
--- linux-4.19.1-aufs/fs/splice.c	2018-11-05 20:06:43.410301989 +0200
+++ linux-4.19.1-aufs-mod/fs/splice.c	2018-11-05 20:08:19.016106739 +0200
@@ -851,6 +851,7 @@ long do_splice_from(struct pipe_inode_in
 
 	return splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_from);
 
 /*
  * Attempt to initiate a splice from a file to a pipe.
@@ -880,6 +881,7 @@ long do_splice_to(struct file *in, loff_
 
 	return splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_to);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
diff -Nurp linux-4.19.1-aufs/fs/sync.c linux-4.19.1-aufs-mod/fs/sync.c
--- linux-4.19.1-aufs/fs/sync.c	2018-11-05 20:06:43.410301989 +0200
+++ linux-4.19.1-aufs-mod/fs/sync.c	2018-11-05 20:08:19.016106739 +0200
@@ -39,6 +39,7 @@ int __sync_filesystem(struct super_block
 		sb->s_op->sync_fs(sb, wait);
 	return __sync_blockdev(sb->s_bdev, wait);
 }
+EXPORT_SYMBOL_GPL(__sync_filesystem);
 
 /*
  * Write out and wait upon all dirty data associated with this
diff -Nurp linux-4.19.1-aufs/fs/xattr.c linux-4.19.1-aufs-mod/fs/xattr.c
--- linux-4.19.1-aufs/fs/xattr.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/fs/xattr.c	2018-11-05 20:08:19.016106739 +0200
@@ -295,6 +295,7 @@ vfs_getxattr_alloc(struct dentry *dentry
 	*xattr_value = value;
 	return error;
 }
+EXPORT_SYMBOL_GPL(vfs_getxattr_alloc);
 
 ssize_t
 __vfs_getxattr(struct dentry *dentry, struct inode *inode, const char *name,
diff -Nurp linux-4.19.1-aufs/kernel/task_work.c linux-4.19.1-aufs-mod/kernel/task_work.c
--- linux-4.19.1-aufs/kernel/task_work.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/kernel/task_work.c	2018-11-05 20:08:19.017106758 +0200
@@ -116,3 +116,4 @@ void task_work_run(void)
 		} while (work);
 	}
 }
+EXPORT_SYMBOL_GPL(task_work_run);
diff -Nurp linux-4.19.1-aufs/security/commoncap.c linux-4.19.1-aufs-mod/security/commoncap.c
--- linux-4.19.1-aufs/security/commoncap.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/security/commoncap.c	2018-11-05 20:08:19.017106758 +0200
@@ -1336,12 +1336,14 @@ int cap_mmap_addr(unsigned long addr)
 	}
 	return ret;
 }
+EXPORT_SYMBOL_GPL(cap_mmap_addr);
 
 int cap_mmap_file(struct file *file, unsigned long reqprot,
 		  unsigned long prot, unsigned long flags)
 {
 	return 0;
 }
+EXPORT_SYMBOL_GPL(cap_mmap_file);
 
 #ifdef CONFIG_SECURITY
 
diff -Nurp linux-4.19.1-aufs/security/device_cgroup.c linux-4.19.1-aufs-mod/security/device_cgroup.c
--- linux-4.19.1-aufs/security/device_cgroup.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/security/device_cgroup.c	2018-11-05 20:08:19.017106758 +0200
@@ -8,6 +8,7 @@
 #include <linux/device_cgroup.h>
 #include <linux/cgroup.h>
 #include <linux/ctype.h>
+#include <linux/export.h>
 #include <linux/list.h>
 #include <linux/uaccess.h>
 #include <linux/seq_file.h>
@@ -824,3 +825,4 @@ int __devcgroup_check_permission(short t
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(__devcgroup_check_permission);
diff -Nurp linux-4.19.1-aufs/security/security.c linux-4.19.1-aufs-mod/security/security.c
--- linux-4.19.1-aufs/security/security.c	2018-10-22 09:37:37.000000000 +0300
+++ linux-4.19.1-aufs-mod/security/security.c	2018-11-05 20:08:19.017106758 +0200
@@ -542,6 +542,7 @@ int security_path_rmdir(const struct pat
 		return 0;
 	return call_int_hook(path_rmdir, 0, dir, dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_rmdir);
 
 int security_path_unlink(const struct path *dir, struct dentry *dentry)
 {
@@ -558,6 +559,7 @@ int security_path_symlink(const struct p
 		return 0;
 	return call_int_hook(path_symlink, 0, dir, dentry, old_name);
 }
+EXPORT_SYMBOL_GPL(security_path_symlink);
 
 int security_path_link(struct dentry *old_dentry, const struct path *new_dir,
 		       struct dentry *new_dentry)
@@ -566,6 +568,7 @@ int security_path_link(struct dentry *ol
 		return 0;
 	return call_int_hook(path_link, 0, old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_link);
 
 int security_path_rename(const struct path *old_dir, struct dentry *old_dentry,
 			 const struct path *new_dir, struct dentry *new_dentry,
@@ -593,6 +596,7 @@ int security_path_truncate(const struct
 		return 0;
 	return call_int_hook(path_truncate, 0, path);
 }
+EXPORT_SYMBOL_GPL(security_path_truncate);
 
 int security_path_chmod(const struct path *path, umode_t mode)
 {
@@ -600,6 +604,7 @@ int security_path_chmod(const struct pat
 		return 0;
 	return call_int_hook(path_chmod, 0, path, mode);
 }
+EXPORT_SYMBOL_GPL(security_path_chmod);
 
 int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
 {
@@ -607,6 +612,7 @@ int security_path_chown(const struct pat
 		return 0;
 	return call_int_hook(path_chown, 0, path, uid, gid);
 }
+EXPORT_SYMBOL_GPL(security_path_chown);
 
 int security_path_chroot(const struct path *path)
 {
@@ -692,6 +698,7 @@ int security_inode_readlink(struct dentr
 		return 0;
 	return call_int_hook(inode_readlink, 0, dentry);
 }
+EXPORT_SYMBOL_GPL(security_inode_readlink);
 
 int security_inode_follow_link(struct dentry *dentry, struct inode *inode,
 			       bool rcu)
@@ -707,6 +714,7 @@ int security_inode_permission(struct ino
 		return 0;
 	return call_int_hook(inode_permission, 0, inode, mask);
 }
+EXPORT_SYMBOL_GPL(security_inode_permission);
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 {
@@ -878,6 +886,7 @@ int security_file_permission(struct file
 
 	return fsnotify_perm(file, mask);
 }
+EXPORT_SYMBOL_GPL(security_file_permission);
 
 int security_file_alloc(struct file *file)
 {
@@ -937,6 +946,7 @@ int security_mmap_file(struct file *file
 		return ret;
 	return ima_file_mmap(file, prot);
 }
+EXPORT_SYMBOL_GPL(security_mmap_file);
 
 int security_mmap_addr(unsigned long addr)
 {
